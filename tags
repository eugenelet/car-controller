!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	html/search/searchdata.js	/^{$/;"	p	class:indexSectionLabels
0	html/search/searchdata.js	/^{$/;"	p	class:indexSectionNames
0	html/search/searchdata.js	/^{$/;"	p	class:indexSectionsWithContent
1	html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
1	html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
1	html/search/searchdata.js	/^  0: "g",$/;"	p	class:indexSectionsWithContent
Activate	html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
BACK	controller/main.cpp	28;"	d	file:
BACK	main.cpp	29;"	d	file:
CONTROL	controller/main.cpp	15;"	d	file:
CONTROL	main.cpp	16;"	d	file:
Class Documentation	latex/refman.tex	/^\\input{annotated}$/;"	c
Class Index	latex/refman.tex	/^\\hypersetup{pageanchor=true}$/;"	c
Class List	latex/annotated.tex	/^\\section{Class List}$/;"	s
CloseResultsWindow	html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
DATAGRAM_SIZE	controller/transmit.cpp	11;"	d	file:
DATAGRAM_SIZE	transmit.cpp	11;"	d	file:
DOMPopupSearchResults	html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
FORWARD	controller/main.cpp	27;"	d	file:
FORWARD	main.cpp	28;"	d	file:
FindChildElement	html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
G   P   I   O   Class Class Reference	latex/classGPIOClass.tex	/^\\hypertarget{classGPIOClass}{}\\section{G\\+P\\+I\\+O\\+Class Class Reference}$/;"	s
GPIOClass	GPIOClass.cpp	/^GPIOClass::GPIOClass()$/;"	f	class:GPIOClass
GPIOClass	GPIOClass.cpp	/^GPIOClass::GPIOClass(string gnum)$/;"	f	class:GPIOClass
GPIOClass	GPIOClass.h	/^class GPIOClass$/;"	c
GPIO_CLASS_H	GPIOClass.h	2;"	d
IP_ADDR	controller/main.cpp	/^static char* IP_ADDR="127.0.0.1";$/;"	v	file:
IP_ADDR	main.cpp	/^static char* IP_ADDR = "127.0.0.1";$/;"	v	file:
LEFT	controller/main.cpp	29;"	d	file:
LEFT	main.cpp	30;"	d	file:
Nav	html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
OnSearchFieldChange	html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
PICTURE	controller/main.cpp	16;"	d	file:
PICTURE	main.cpp	17;"	d	file:
ProcessKeys	html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
Public Member Functions	latex/classGPIOClass.tex	/^\\label{classGPIOClass}\\index{G\\+P\\+I\\+O\\+Class@{G\\+P\\+I\\+O\\+Class}}$/;"	u
REQUEST	controller/main.cpp	38;"	d	file:
REQUEST	main.cpp	39;"	d	file:
RIGHT	controller/main.cpp	30;"	d	file:
RIGHT	main.cpp	31;"	d	file:
SENDING	controller/main.cpp	36;"	d	file:
SENDING	main.cpp	37;"	d	file:
SENT	controller/main.cpp	39;"	d	file:
SENT	main.cpp	40;"	d	file:
Search	html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	html/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
Toggle	html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
VALID	controller/main.cpp	37;"	d	file:
VALID	main.cpp	38;"	d	file:
VIDEO	controller/main.cpp	17;"	d	file:
VIDEO	main.cpp	18;"	d	file:
buf	controller/receiver.cpp	/^char buf[1024];$/;"	v
buf	receiver.cpp	/^char buf[1024];$/;"	v
convertToId	html/search/search.js	/^function convertToId(search)$/;"	f
createResults	html/search/search.js	/^function createResults()$/;"	f
error	client_udp.cpp	/^void error(const char *msg)$/;"	f
error_receiver	controller/receiver.cpp	/^void error_receiver(const char *msg)$/;"	f
error_receiver	receiver.cpp	/^void error_receiver(const char *msg)$/;"	f
error_transmit	controller/transmit.cpp	/^void error_transmit(const char *msg)$/;"	f
error_transmit	transmit.cpp	/^void error_transmit(const char *msg)$/;"	f
export_gpio	GPIOClass.cpp	/^int GPIOClass::export_gpio()$/;"	f	class:GPIOClass
from	controller/receiver.cpp	/^struct sockaddr_in from;$/;"	v	typeref:struct:sockaddr_in
from	receiver.cpp	/^struct sockaddr_in from;$/;"	v	typeref:struct:sockaddr_in
fromlen	controller/receiver.cpp	/^socklen_t fromlen;$/;"	v
fromlen	receiver.cpp	/^socklen_t fromlen;$/;"	v
getXPos	html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	html/search/search.js	/^function getYPos(item)$/;"	f
get_gpionum	GPIOClass.cpp	/^string GPIOClass::get_gpionum(){$/;"	f	class:GPIOClass
getch	controller/getChar.cpp	/^char getch() {$/;"	f
getch	getChar.cpp	/^char getch() {$/;"	f
getch_flag	controller/main.cpp	/^bool getch_flag = false;$/;"	v
getch_thread	controller/main.cpp	/^void* getch_thread(void* data){$/;"	f
getval_gpio	GPIOClass.cpp	/^int GPIOClass::getval_gpio(string& val){$/;"	f	class:GPIOClass
gpionum	GPIOClass.h	/^    string gpionum; \/\/ GPIO number associated with the instance of an object$/;"	m	class:GPIOClass
image_size	controller/main.cpp	/^int image_size= 0;$/;"	v
init_search	html/search/search.js	/^function init_search()$/;"	f
keyIn	controller/main.cpp	/^char keyIn;$/;"	v
l00001	html/GPIOClass_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GPIO_CLASS_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GPIO_CLASS_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">\/* GPIO Class<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * Purpose: Each object instantiated from this class will control a GPIO pin<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> * The GPIO pin number must be passed to the overloaded class constructor<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classGPIOClass.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classGPIOClass.html">GPIOClass<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classGPIOClass.html">GPIOClass<\/a>();  <span class="comment">\/\/ create a GPIO object that controls GPIO4 (default<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <a class="code" href="classGPIOClass.html">GPIOClass<\/a>(<span class="keywordtype">string<\/span> x); <span class="comment">\/\/ create a GPIO object that controls GPIOx, where x is passed to this constructor<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">int<\/span> export_gpio(); <span class="comment">\/\/ exports GPIO<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keywordtype">int<\/span> unexport_gpio(); <span class="comment">\/\/ unexport GPIO<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keywordtype">int<\/span> setdir_gpio(<span class="keywordtype">string<\/span> dir); <span class="comment">\/\/ Set GPIO Direction<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">int<\/span> setval_gpio(<span class="keywordtype">string<\/span> val); <span class="comment">\/\/ Set GPIO Value (putput pins)<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">int<\/span> getval_gpio(<span class="keywordtype">string<\/span>&amp; val); <span class="comment">\/\/ Get GPIO Value (input\/ output pins)<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">string<\/span> get_gpionum(); <span class="comment">\/\/ return the GPIO number associated with the instance of an object<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">string<\/span> gpionum; <span class="comment">\/\/ GPIO number associated with the instance of an object<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><\/div>$/;"	a
latex_count	latex/Makefile	/^	latex_count=8 ; \\$/;"	m
length	controller/receiver.cpp	/^int sock, length, n;$/;"	v
length	receiver.cpp	/^int sock, length, n;$/;"	v
letter_G	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_G"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;G&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
main	client_udp.cpp	/^int main(int argc, char *argv[])$/;"	f
main	controller/main.cpp	/^int main (void)$/;"	f
main	main.cpp	/^int main (void)$/;"	f
n	controller/receiver.cpp	/^int sock, length, n;$/;"	v
n	receiver.cpp	/^int sock, length, n;$/;"	v
pub-methods	html/classGPIOClass.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
rcv_PORT	controller/main.cpp	/^static char* rcv_PORT="2023";$/;"	v	file:
rcv_PORT	main.cpp	/^static char* rcv_PORT="2022";$/;"	v	file:
receive_flag	controller/main.cpp	/^bool receive_flag = false;$/;"	v
receive_thread	controller/main.cpp	/^void* receive_thread(void* data){$/;"	f
receivedPacket	controller/main.cpp	/^unsigned short* receivedPacket;$/;"	v
receiver	controller/receiver.cpp	/^unsigned short* receiver(){$/;"	f
receiver	receiver.cpp	/^unsigned short* receiver(){$/;"	f
receiver_init	controller/receiver.cpp	/^void receiver_init(char *port)$/;"	f
receiver_init	receiver.cpp	/^void receiver_init(char *port)$/;"	f
recvPacket	controller/receiver.cpp	/^unsigned short recvPacket[512];$/;"	v
recvPacket	receiver.cpp	/^unsigned short recvPacket[512];$/;"	v
requestVid_flag	controller/main.cpp	/^bool requestVid_flag = false;$/;"	v
searchData	html/search/all_0.js	/^var searchData=$/;"	v
searchData	html/search/classes_0.js	/^var searchData=$/;"	v
server	controller/receiver.cpp	/^struct sockaddr_in server;$/;"	v	typeref:struct:sockaddr_in
server	receiver.cpp	/^struct sockaddr_in server;$/;"	v	typeref:struct:sockaddr_in
setClassAttr	html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setdir_gpio	GPIOClass.cpp	/^int GPIOClass::setdir_gpio(string dir)$/;"	f	class:GPIOClass
setval_gpio	GPIOClass.cpp	/^int GPIOClass::setval_gpio(string val)$/;"	f	class:GPIOClass
snd_PORT	controller/main.cpp	/^static char* snd_PORT="2022";$/;"	v	file:
snd_PORT	main.cpp	/^static char* snd_PORT="2023";$/;"	v	file:
sock	controller/receiver.cpp	/^int sock, length, n;$/;"	v
sock	receiver.cpp	/^int sock, length, n;$/;"	v
toggleFolder	html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleVisibility	html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
transmit	controller/transmit.cpp	/^int transmit(char *ip_addr, char* port, unsigned short* data)$/;"	f
transmit	transmit.cpp	/^int transmit(char *ip_addr, char* port, unsigned short* data)$/;"	f
unexport_gpio	GPIOClass.cpp	/^int GPIOClass::unexport_gpio()$/;"	f	class:GPIOClass
updateStripes	html/dynsections.js	/^function updateStripes()$/;"	f
video_buffer	controller/main.cpp	/^vector<unsigned char> video_buffer;$/;"	v
video_thread	controller/main.cpp	/^void* video_thread(void* data){$/;"	f
